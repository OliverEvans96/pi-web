---
import type { Page } from "@/payload/payload-types";
import Header from "./Header.astro";
import Paragraph from "./Paragraph.astro";
import ProductCard from "./ProductCard.astro";
import EventCard from "./EventCard.astro";
import TwoColumn from "./TwoColumn.astro";
import RichText from "./RichText.astro";
import type { FormattedElement, FormattedText } from "@/payload/rich-text-export";

interface Props {
    block: Page["blocks"][0];
}

let { block } = Astro.props;
---

{
    (block.blockType == "Header" && <Header text={block.header} />) ||

    (block.blockType == "Paragraph" && <Paragraph text={block.text} />) ||

    (block.blockType == "RichText" && <RichText richText={block.content as (FormattedElement | FormattedText)[]} />) ||

    (block.blockType == "ImageBlock" && <img src={block.image.url} width={block.width} height={block.height} />) ||

    (block.blockType == "VideoBlock" && <video controls width={block.width} height={block.height} >
        <source src={block.video.url} type={block.video.mimetype} />
    </video>) ||

    (block.blockType == "TwoColumn" && <TwoColumn blocks={block} />) ||

    // NOTE: not sure why product could be a string,
    // but typescript thinks it could
    // (according to types generated by payload)
    (block.blockType == "ProductCard" 
        && typeof block.product != "string" 
        && <ProductCard product={block.product} />) ||

    (block.blockType == "EventCard" && <EventCard title={block.title} date={block.date} price={block.price} description={block.description}/>) ||

    {console.log(`Unknown block ${JSON.stringify(block)}`)}
}
